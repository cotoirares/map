ExeStack: [(Ref(Int) v; (NewStatement(v, 20); (print(RefExp(v)); (WriteHeapStmt(v, 30); print(RefExp(v) + 5)))))]
SymbolTable: {}
Output: []
FileTable: {}
Heap: (Heap is empty!)


ExeStack: [Ref(Int) v, (NewStatement(v, 20); (print(RefExp(v)); (WriteHeapStmt(v, 30); print(RefExp(v) + 5))))]
SymbolTable: {}
Output: []
FileTable: {}
Heap: (Heap is empty!)


ExeStack: [(NewStatement(v, 20); (print(RefExp(v)); (WriteHeapStmt(v, 30); print(RefExp(v) + 5))))]
SymbolTable: {v=RefValue(0, Int)}
Output: []
FileTable: {}
Heap: (Heap is empty!)


ExeStack: [NewStatement(v, 20), (print(RefExp(v)); (WriteHeapStmt(v, 30); print(RefExp(v) + 5)))]
SymbolTable: {v=RefValue(0, Int)}
Output: []
FileTable: {}
Heap: (Heap is empty!)


ExeStack: [(print(RefExp(v)); (WriteHeapStmt(v, 30); print(RefExp(v) + 5)))]
SymbolTable: {v=RefValue(1, Int)}
Output: []
FileTable: {}
Heap: 1 -> 20


ExeStack: [print(RefExp(v)), (WriteHeapStmt(v, 30); print(RefExp(v) + 5))]
SymbolTable: {v=RefValue(1, Int)}
Output: []
FileTable: {}
Heap: 1 -> 20


ExeStack: [(WriteHeapStmt(v, 30); print(RefExp(v) + 5))]
SymbolTable: {v=RefValue(1, Int)}
Output: [20]
FileTable: {}
Heap: 1 -> 20


ExeStack: [WriteHeapStmt(v, 30), print(RefExp(v) + 5)]
SymbolTable: {v=RefValue(1, Int)}
Output: [20]
FileTable: {}
Heap: 1 -> 20


ExeStack: [print(RefExp(v) + 5)]
SymbolTable: {v=RefValue(1, Int)}
Output: [20]
FileTable: {}
Heap: 1 -> 30


ExeStack: []
SymbolTable: {v=RefValue(1, Int)}
Output: [20, 35]
FileTable: {}
Heap: 1 -> 30


ExeStack: [(Ref(Int) v; (NewStatement(v, 20); (print(RefExp(v)); (WriteHeapStmt(v, 30); print(RefExp(v) + 5)))))]
SymbolTable: {}
Output: []
FileTable: {}
Heap: (Heap is empty!)


ExeStack: [Ref(Int) v, (NewStatement(v, 20); (print(RefExp(v)); (WriteHeapStmt(v, 30); print(RefExp(v) + 5))))]
SymbolTable: {}
Output: []
FileTable: {}
Heap: (Heap is empty!)


ExeStack: [(NewStatement(v, 20); (print(RefExp(v)); (WriteHeapStmt(v, 30); print(RefExp(v) + 5))))]
SymbolTable: {v=RefValue(0, Int)}
Output: []
FileTable: {}
Heap: (Heap is empty!)


ExeStack: [NewStatement(v, 20), (print(RefExp(v)); (WriteHeapStmt(v, 30); print(RefExp(v) + 5)))]
SymbolTable: {v=RefValue(0, Int)}
Output: []
FileTable: {}
Heap: (Heap is empty!)


ExeStack: [(print(RefExp(v)); (WriteHeapStmt(v, 30); print(RefExp(v) + 5)))]
SymbolTable: {v=RefValue(1, Int)}
Output: []
FileTable: {}
Heap: 1 -> 20


ExeStack: [print(RefExp(v)), (WriteHeapStmt(v, 30); print(RefExp(v) + 5))]
SymbolTable: {v=RefValue(1, Int)}
Output: []
FileTable: {}
Heap: 1 -> 20


ExeStack: [(WriteHeapStmt(v, 30); print(RefExp(v) + 5))]
SymbolTable: {v=RefValue(1, Int)}
Output: [20]
FileTable: {}
Heap: 1 -> 20


ExeStack: [WriteHeapStmt(v, 30), print(RefExp(v) + 5)]
SymbolTable: {v=RefValue(1, Int)}
Output: [20]
FileTable: {}
Heap: 1 -> 20


ExeStack: [print(RefExp(v) + 5)]
SymbolTable: {v=RefValue(1, Int)}
Output: [20]
FileTable: {}
Heap: 1 -> 30


ExeStack: []
SymbolTable: {v=RefValue(1, Int)}
Output: [20, 35]
FileTable: {}
Heap: 1 -> 30


ID: 6
ExeStack: [(Ref(Int) v; (NewStatement(v, 20); (print(RefExp(v)); (WriteHeapStmt(v, 30); print(RefExp(v) + 5)))))]
SymbolTable: {}
Output: []
FileTable: {}
Heap: (Heap is empty!)


ID: 6
ExeStack: [Ref(Int) v, (NewStatement(v, 20); (print(RefExp(v)); (WriteHeapStmt(v, 30); print(RefExp(v) + 5))))]
SymbolTable: {}
Output: []
FileTable: {}
Heap: (Heap is empty!)


ID: 6
ExeStack: [Ref(Int) v, (NewStatement(v, 20); (print(RefExp(v)); (WriteHeapStmt(v, 30); print(RefExp(v) + 5))))]
SymbolTable: {}
Output: []
FileTable: {}
Heap: (Heap is empty!)


ID: 6
ExeStack: [(NewStatement(v, 20); (print(RefExp(v)); (WriteHeapStmt(v, 30); print(RefExp(v) + 5))))]
SymbolTable: {v=RefValue(0, Int)}
Output: []
FileTable: {}
Heap: (Heap is empty!)


ID: 6
ExeStack: [(NewStatement(v, 20); (print(RefExp(v)); (WriteHeapStmt(v, 30); print(RefExp(v) + 5))))]
SymbolTable: {v=RefValue(0, Int)}
Output: []
FileTable: {}
Heap: (Heap is empty!)


ID: 6
ExeStack: [NewStatement(v, 20), (print(RefExp(v)); (WriteHeapStmt(v, 30); print(RefExp(v) + 5)))]
SymbolTable: {v=RefValue(0, Int)}
Output: []
FileTable: {}
Heap: (Heap is empty!)


ID: 6
ExeStack: [NewStatement(v, 20), (print(RefExp(v)); (WriteHeapStmt(v, 30); print(RefExp(v) + 5)))]
SymbolTable: {v=RefValue(0, Int)}
Output: []
FileTable: {}
Heap: (Heap is empty!)


ID: 6
ExeStack: [(print(RefExp(v)); (WriteHeapStmt(v, 30); print(RefExp(v) + 5)))]
SymbolTable: {v=RefValue(1, Int)}
Output: []
FileTable: {}
Heap: 1 -> 20


ID: 6
ExeStack: [(print(RefExp(v)); (WriteHeapStmt(v, 30); print(RefExp(v) + 5)))]
SymbolTable: {v=RefValue(1, Int)}
Output: []
FileTable: {}
Heap: 1 -> 20


ID: 6
ExeStack: [print(RefExp(v)), (WriteHeapStmt(v, 30); print(RefExp(v) + 5))]
SymbolTable: {v=RefValue(1, Int)}
Output: []
FileTable: {}
Heap: 1 -> 20


ID: 6
ExeStack: [print(RefExp(v)), (WriteHeapStmt(v, 30); print(RefExp(v) + 5))]
SymbolTable: {v=RefValue(1, Int)}
Output: []
FileTable: {}
Heap: 1 -> 20


ID: 6
ExeStack: [(WriteHeapStmt(v, 30); print(RefExp(v) + 5))]
SymbolTable: {v=RefValue(1, Int)}
Output: [20]
FileTable: {}
Heap: 1 -> 20


ID: 6
ExeStack: [(WriteHeapStmt(v, 30); print(RefExp(v) + 5))]
SymbolTable: {v=RefValue(1, Int)}
Output: [20]
FileTable: {}
Heap: 1 -> 20


ID: 6
ExeStack: [WriteHeapStmt(v, 30), print(RefExp(v) + 5)]
SymbolTable: {v=RefValue(1, Int)}
Output: [20]
FileTable: {}
Heap: 1 -> 20


ID: 6
ExeStack: [WriteHeapStmt(v, 30), print(RefExp(v) + 5)]
SymbolTable: {v=RefValue(1, Int)}
Output: [20]
FileTable: {}
Heap: 1 -> 20


ID: 6
ExeStack: [print(RefExp(v) + 5)]
SymbolTable: {v=RefValue(1, Int)}
Output: [20]
FileTable: {}
Heap: 1 -> 30


ID: 6
ExeStack: [print(RefExp(v) + 5)]
SymbolTable: {v=RefValue(1, Int)}
Output: [20]
FileTable: {}
Heap: 1 -> 30


ID: 6
ExeStack: []
SymbolTable: {v=RefValue(1, Int)}
Output: [20, 35]
FileTable: {}
Heap: 1 -> 30


ID: 6
ExeStack: []
SymbolTable: {v=RefValue(1, Int)}
Output: [20, 35]
FileTable: {}
Heap: 1 -> 30


ID: 6
ExeStack: []
SymbolTable: {v=RefValue(1, Int)}
Output: [20, 35]
FileTable: {}
Heap: 1 -> 30


